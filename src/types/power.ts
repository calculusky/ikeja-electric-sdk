import { ServiceCode } from "./requester";

export type ConfirmationType = "MN" | "CN";
type AccountType = "MD" | "NMD";
type Kind = "POSTPAY" | "PREPAY";
type PaidType = "bankteller" | "cash" | "cheque" | "POS";

type CustomerBasicDetailObject = {
    /** Account number generated by CIS system and allocated to each customer. */
    accountNO: string;
    /**
     * MD/NMD.
       MD refers to maximum demand customer, while NMD refers to non-maximum demand customer
     */
    accountType: AccountType;

    /** Name of the customer */
    name: string;

    /** Service address of the customer */
    serviceAddress: string;

    /** Mobile phone number of the customer */
    mobilePhone: string;
};

type CustomerOrganizationObject = {
    /** Number of organization (UT only) which the customer belongs to */
    orgNO: number;
    /** Name of the organization which the customer belongs to */
    orgName: string;
};

type MeterObject = {
    /** Meter number of the customer */
    meterSerialNO: string;

    /** Manufacturer of the prepaid meter */
    manuf: string;

    /** Model of the prepaid meter */
    model: string;
};

type TransformerObject = {
    /** Number of DT (Distribution Transformer) which the customer belongs to */
    dtNO: number;
    /** Name of the DT which the customer belongs to */
    dtName: string;
};

type FeederObject = {
    /** Name of feeder band which the customer belongs to */
    feederBand: string;

    /** Name of feeder which the customer belongs to */
    feederName: string;
};

type TariffObject = {
    /** Name of tariff contracted between Ikeja electric and the customer */
    tariffName: string;

    /** Consumption rate of tariff contracted between Ikeja electric and the customer */
    rate: number;

    /** VAT rate of tariff contracted between Ikeja electric and the customer */
    vatRate: number;
};

type UnitObject = {
    /** Electricity units adjusted for the customer by the system */
    adjustUnits: number;

    /** Electricity units which is preset into the prepaid meter before connected to the grid */
    presetUnits: number;

    /**
     * Electricity units to be issued into the prepaid meter of the customer with TOKEN.
       (totalUnits=units + adjustUnit – presetUnit)
     */
    totalUnits: number;

    /** Electricity Units purchased with tendered amount. */
    units: number;
};

/**
 * 1. costOfUnit: Consumption units cost included in the minimum vend amount
 * 2. vat: VAT cost included in the minimum vend amount
 * 3. fixedCharge: Fixed charge included in the minimum vend amount. Currently the fixed amount is always 0.00.
 * 4. outstandingDebt: Historical arrears, a type of energy fee
 * 5. lor: Revenue loss, a type of energy fee
 * 6. currentCharge: Arrears generated from the last bill, a type of energy fee
 * 7. msc: Meter service charge, a type of business fee but energy payment
 * 8. installationFee: Meter installation fee, a type of business service fee
 * 9. meterCost: Meter cost, a type of business service fee
 * 10. reconnectionFee: Reconnection fee, a type of business service fee
 * 11. administrativeCharge: Administrative charge, a type of business service fee
 * 12. penalty: Penalty normally caused by unauthorized power usage or connection, a business service fee
 */
type FeeType =
    | "costOfUnit"
    | "vat"
    | "fixedCharge"
    | "outstandingDebt"
    | "lor"
    | "currentCharge"
    | "msc"
    | "installationFee"
    | "meterCost"
    | "reconnectionFee"
    | "administrativeCharge"
    | "penalty";

type MappedFeeType = {
    [K in FeeType]: {
        feederType: K;
        feeAmount: number;
    };
}[FeeType][];

export type ConfirmDetailsOptions<T extends ConfirmationType> = {
    /**
     * Confirmation type: CN/MN.
        CN refers to customer account number (Account No.), while MN refers to meter number (Meter No.)
     */
    type: T;

    /**
     * When confirmation type is CN, this field puts Account No., while MN, this field puts Meter No.
     */
    requestNO: string;
};

type ConfirmDetailsPrePaidResponseObject = {
    /** Remaining balance of the customer account. */
    balance: number;
    /** Outstanding debts of the customer account */
    arrears: number;
    /** Money refunded to the customer */
    refund: number;

    /**
     * Minimum amount which should be paid by the customer when vending.
       1. When adjusted unit > 0, calculation formula: (Preset unit + 0.1kWh) * Tariff Rate + VAT + Arrears (Instalment) – Credit(Balance)
       2. When adjusted unit < 0; calculation formula: (Preset Unit - Adjusted Power + 0.1kWh) * Tariff Rate + VAT + Arrears (Instalment) - Credit(Balance)
       Note: The preset unit for the second credit purchase is 0.
     */
    minimumVend: number;
    minVendBreakdown: MappedFeeType;
} & Optional<CustomerBasicDetailObject, "mobilePhone"> &
    CustomerOrganizationObject &
    Omit<MeterObject, "model" | "manuf"> &
    TransformerObject &
    Partial<FeederObject> &
    TariffObject &
    Omit<UnitObject, "units" | "totalUnits">;

type ConfirmDetailsPostpaidResponseObject = {
    /** Remaining balance of the customer account. */
    balance: number;
    /** Outstanding debts of the customer account */
    outstandingDebt: number;
} & CustomerBasicDetailObject &
    CustomerOrganizationObject &
    TransformerObject &
    TariffObject;

type GetConfirmDetailsResponseObject<T extends ConfirmationType> =
    T extends keyof ConfirmDetailsResponseObjectMap
        ? ConfirmDetailsResponseObjectMap[T]
        : never;

type ConfirmDetailsResponseObjectMap = {
    MN: ConfirmDetailsPrePaidResponseObject;
    CN: ConfirmDetailsPostpaidResponseObject;
};

//purchase credit
export type PurchaseCreditOptions<K extends Kind> = {
    /**
     * The unique transaction identifier provided by each vending client. 
       Generation rules: yyyyMMddHHmmssSSS+appID(last 3 digits)+serial number (6 digits) , for example: 20210910093045123001000001
     */
    orderNO: string;
    /** 
     * (POSTPAY/PREPAY)
        Account Payment for Postpaid /Purchase Credit for Prepaid
     */
    kind: K;
    /** When “kind” is POSTPAY, this field puts Account No., while PREPAY, then Meter No. */
    requestNO: string;
    /**
     * MD/NMD
       MD refers to maximum demand customer, while NMD refers to non-maximum demand customer.
     */
    accountType: AccountType;

    /** The total NGN amount of the payment made by the combination of cash, cheque, debit card, credit card, bankteller, etc */
    amountTendered: number;

    /** 
     * cash/cheque/POS /bankteller
       Remarks: POS refers to using credit card or debit card to purchase electricity.
     */
    paidType: PaidType;
};

export type PurchaseCreditPrepaidResponseObject = {
    /** Successful payment identifier generated by CIS business system. The third-party vending client can determine the payment is successful in CIS business system if this field is obtained. */
    receiptNO: string;

    /** Transaction date with format yyyyMMddHHmmss, for example 20210902120534 */
    transactionDate: string;

    /** TOKEN with electricity units to be issued into the prepaid meter of the customer */
    token: string;

    /** The total NGN amount of the payment made by the combination of cash, cheque, debit card, credit card, bankteller, etc */
    amountTendered: number;

    /** Remaining balance of the customer account. */
    balance: number;

    /** Money refunded to the customer */
    refund: number;

    /** Two key change tokens will be returned to the customer when customer purchases credit for the first time. The tokens are separated by comma. */
    kct?: string;

    /** Breakdown list of credit purchased by the customer */
    creditBreakdown: MappedFeeType;

    /** The remaining amount of the wallet client in the CIS system. It will be returned when the client is a wallet client. If non-wallet client, it is not returned. */
    walletBalance: number;

    /** SGC number that CIS system is using to generate credit TOKEN. */
    sgc: string;
} & UnitObject &
    Optional<CustomerBasicDetailObject, "mobilePhone"> &
    CustomerOrganizationObject &
    MeterObject &
    TransformerObject &
    Partial<FeederObject> &
    TariffObject &
    UnitObject;

export type GetResponseObject<
    S extends ServiceCode,
    C extends ConfirmationType = ConfirmationType,
> = S extends keyof ResponseObjectMap<C> ? ResponseObjectMap<C>[S] : never;

type ResponseObjectMap<C extends ConfirmationType> = {
    [ServiceCode.ConfirmDetails]: GetConfirmDetailsResponseObject<C>;
};

export interface IPower {
    /**
     * @description Customers can enter the account number or meter number through a third-party collection agency to query the CIS system for their arrears and minimum vend amount information. The breakdown of minimum vend amount is given for the convenience of prepaid customer to purchase credit. Additionally, the basic information of the vending customer is also provided by the interface, including account number, name, address, mobile phone, meter number, arrear information etc
     * @param options
     */
    confirmDetails<C extends ConfirmationType>(
        options: ConfirmDetailsOptions<C>,
    ): Promise<GetResponseObject<ServiceCode.ConfirmDetails, C>>;
}
